rm(list = ls())
setwd('C:/Users/cusey/source/repos/DataScienceProjects/MDS 556 - House Prices Regression')
## SECTION 1 - data preprocessing
## OBJECTIVE - clean each feature according to data definitions
source("data preprocessing.R", local = TRUE)
options(scipen = 999)
data <- read.csv(file='train.csv', header=TRUE, stringsAsFactors = FALSE)
data_raw <- data
## cleaner - apply validations according to data definitions
data_clean <- data_cleaner(data_raw)
data <- data_clean
rm("data_raw")
sapply(data_FS,function(x) sum(is.na(x)))
## DATA EXPLORATION - See Data Exploration.R
source("data exploration.R", local = TRUE)
## feature engineering
source("feature engineering.R", local = TRUE)
## create a version of the data w/ feature selection applied.
data_FS <- featureEngineering(data_clean)
data <- data_FS
rm("data_clean")
rm("data_FS")
numeric_correlation_plot(data)
importantvariables_rf(data)
set.seed(7)
data_feature_selection <- data
data_feature_selection$Target <- data$SalePrice
data_feature_selection$SalePrice <- NULL
# load the library
#installed.packages("mlbench")
library(mlbench)
# load the library
installed.packages("mlbench")
install.packages("mlbench")
rm(list = ls())
setwd('C:/Users/cusey/source/repos/DataScienceProjects/MDS 556 - House Prices Regression')
## SECTION 1 - data preprocessing
## OBJECTIVE - clean each feature according to data definitions
source("data preprocessing.R", local = TRUE)
options(scipen = 999)
data <- read.csv(file='train.csv', header=TRUE, stringsAsFactors = FALSE)
data_raw <- data
## cleaner - apply validations according to data definitions
data_clean <- data_cleaner(data_raw)
data <- data_clean
rm("data_raw")
## DATA EXPLORATION - See Data Exploration.R
source("data exploration.R", local = TRUE)
## feature engineering
source("feature engineering.R", local = TRUE)
## create a version of the data w/ feature selection applied.
data_FS <- featureEngineering(data_clean)
data <- data_FS
rm("data_clean")
rm("data_FS")
numeric_correlation_plot(data)
importantvariables_rf(data)
data_feature_selection <- data
data_feature_selection$Target <- data$SalePrice
data_feature_selection$SalePrice <- NULL
# load the library
#installed.packages("mlbench")
library(mlbench)
library(caret)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
results <- rfe(data_feature_selection[,1:66], data_feature_selection[,67], sizes=c(1:10), rfeControl=control)
# summarize the results
print(results)
library(psych)
princomp(data)
princomp(data, scores=TRUE,cor=TRUE)
library(caret)
library(e1071)
library(caret)
library(e1071)
pca = preProcess(x=data[-67], method="pca",pcaComp = 5)
plot(pca)
plot(pcaComp)
summary(pcaComp)
summary(pca)
library(stats)
pca = princomp(x=data[-67], score=TRUE,cor = TRUE)
which(is.infinite(data))
which(is.infinite(data$Target))
for (x in data) {
which(is.infinite(data$x))
}
print(which(is.infinite(data$x)))
summary(pca)
pca = princomp(x=data[-67], score=TRUE,cor = TRUE)
summary(pca)
pca = princomp(x=data[-67], score=TRUE,cor = TRUE)
pca = prcomp(data[-67])
pca = prcomp(data[-67], na.action=na.omit)
pca = prcomp(data[-67], na.action="na.omit")
pca2 = prcomp(data[-67], na.action="na.omit")
na.action(na.omit(data))
pca2 = prcomp(data[-67])
pca2 = prcomp(data)
# summarize the results
print(results)
# summarize the results
print(results)
summary(results)
# summarize the results
print(results$results)
# summarize the results
print(results$variables)
# summarize the results
print(results$bestSubset)
# summarize the results
print(results$variables)
# summarize the results
print(results$variables==66)
summary(results)
# summarize the results
print(results)
# summarize the results
print(results$optVariables)
# summarize the results
print(head(results$optVariables),5)
# summarize the results
optVars <- (head(results$optVariables),5)
# summarize the results
optVars <- head(results$optVariables),5)
# summarize the results
optVars <- head(results$optVariables,5)
data_feature_selection(optVars)
data_feature_selection <- data
data_feature_selection(optVars)
data_feature_selection <- data
##print(results)
# summarize the results
optVars <- head(results$optVariables,5)
data_feature_selection(optVars)
data_feature_selection[optVars]
t <- data_feature_selection[optVars]
rm(list = ls())
setwd('C:/Users/cusey/source/repos/DataScienceProjects/MDS 556 - House Prices Regression')
## SECTION 1 - data preprocessing
## OBJECTIVE - clean each feature according to data definitions
source("data preprocessing.R", local = TRUE)
options(scipen = 999)
data <- read.csv(file='train.csv', header=TRUE, stringsAsFactors = FALSE)
data_raw <- data
## cleaner - apply validations according to data definitions
data_clean <- data_cleaner(data_raw)
data <- data_clean
rm("data_raw")
## DATA EXPLORATION - See Data Exploration.R
source("data exploration.R", local = TRUE)
## feature engineering
source("feature engineering.R", local = TRUE)
## create a version of the data w/ feature selection applied.
data_FE <- featureEngineering(data_clean)
data <- data_FE
rm("data_clean")
rm("data_FS")
data_FS <- RFE(data)
rm("data_FE")
data_FS <- RFE(data)
## feature engineering
source("feature engineering.R", local = TRUE)
data_FS <- RFE(data)
##print(results)
# summarize the results
optVars <- c(head(results$optVariables,5),"Target")
data_FS <- RFE(data)
data_FS <- RFE(data)
# load the library
#installed.packages("mlbench")
library(mlbench)
library(caret)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
results <- rfe(data_feature_selection[,1:66], data_feature_selection[,67], sizes=c(1:10), rfeControl=control)
data_feature_selection <- data
# load the library
#installed.packages("mlbench")
library(mlbench)
library(caret)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
results <- rfe(data_feature_selection[,1:66], data_feature_selection[,67], sizes=c(1:10), rfeControl=control)
##print(results)
# summarize the results
optVars <- head(results$optVariables,5)
optVars <- c(optVars,"Target")
return(data_feature_selection[optVars])
data_feature_selection[optVars]
## feature engineering
source("feature engineering.R", local = TRUE)
data_FS <- RFE(data)
View(importantvariables_rf)
train <- splitData("train", .8, data_FS)
train <- splitData("train", 0.8, data_FS)
View(splitData)
View(splitData)
## feature engineering
source("feature engineering.R", local = TRUE)
## DATA EXPLORATION - See Data Exploration.R
source("data exploration.R", local = TRUE)
train <- splitData("train", 0.8, data_FS)
test <- splitData("test", .8, data_FS)
## linear regression
source("linear engineering.R", local = TRUE)
## linear regression
source("linear regression.R", local = TRUE)
rm(list = ls())
setwd('C:/Users/cusey/source/repos/DataScienceProjects/MDS 556 - House Prices Regression')
## SECTION 1 - data preprocessing
## OBJECTIVE - clean each feature according to data definitions
source("data preprocessing.R", local = TRUE)
options(scipen = 999)
data <- read.csv(file='train.csv', header=TRUE, stringsAsFactors = FALSE)
data_raw <- data
## cleaner - apply validations according to data definitions
data_clean <- data_cleaner(data_raw)
data <- data_clean
rm("data_raw")
## DATA EXPLORATION - See Data Exploration.R
source("data exploration.R", local = TRUE)
## feature engineering
source("feature engineering.R", local = TRUE)
## create a version of the data w/ feature selection applied.
data_FE <- featureEngineering(data_clean)
data <- data_FE
rm("data_clean")
rm("data_FE")
data_FS <- RFE(data)
train <- splitData("train", 0.8, data_FS)
test <- splitData("test", 0.8, data_FS)
## linear regression
source("linear regression.R", local = TRUE)
linear.regression <- linearRegression(train)
linear.regression
important_vars <- RFE(data)
## DATA EXPLORATION - See Data Exploration.R
source("data exploration.R", local = TRUE)
## DATA EXPLORATION - See Data Exploration.R
source("data exploration.R", local = TRUE)
## feature engineering
source("feature engineering.R", local = TRUE)
keep_vars
important_vars <- RFE(data)
k <- 6
keep_vars <- head(results$optVariables,k)
keep_vars <- c(keep_vars,"Target")
k <- 6
keep_vars <- head(important_vars$optVariables,k)
keep_vars <- head(optVariables,k)
keep_vars <- head(important_vars,k)
keep_vars <- c(keep_vars,"Target")
data_FS <- data[keep_vars]
train <- splitData("train", 0.8, data_FS)
test <- splitData("test", 0.8, data_FS)
linear.regression <- linearRegression(train)
linear.regression
k <- 7
keep_vars <- head(important_vars,k)
keep_vars <- c(keep_vars,"Target")
data_FS <- data[keep_vars]
train <- splitData("train", 0.8, data_FS)
test <- splitData("test", 0.8, data_FS)
## linear regression
source("linear regression.R", local = TRUE)
linear.regression <- linearRegression(train)
linear.regression
k <- 8
keep_vars <- head(important_vars,k)
keep_vars <- c(keep_vars,"Target")
data_FS <- data[keep_vars]
train <- splitData("train", 0.8, data_FS)
test <- splitData("test", 0.8, data_FS)
numeric_correlation_plot(data)
importantvariables_rf(data)
## linear regression
source("linear regression.R", local = TRUE)
linear.regression <- linearRegression(train)
linear.regression
k <- 4
keep_vars <- head(important_vars,k)
keep_vars <- c(keep_vars,"Target")
data_FS <- data[keep_vars]
train <- splitData("train", 0.8, data_FS)
test <- splitData("test", 0.8, data_FS)
numeric_correlation_plot(data)
importantvariables_rf(data)
## linear regression
source("linear regression.R", local = TRUE)
linear.regression <- linearRegression(train)
linear.regression
k <- 3
keep_vars <- head(important_vars,k)
keep_vars <- c(keep_vars,"Target")
data_FS <- data[keep_vars]
train <- splitData("train", 0.8, data_FS)
test <- splitData("test", 0.8, data_FS)
numeric_correlation_plot(data)
importantvariables_rf(data)
## linear regression
source("linear regression.R", local = TRUE)
linear.regression <- linearRegression(train)
linear.regression
k <- 2
keep_vars <- head(important_vars,k)
keep_vars <- c(keep_vars,"Target")
data_FS <- data[keep_vars]
train <- splitData("train", 0.8, data_FS)
test <- splitData("test", 0.8, data_FS)
numeric_correlation_plot(data)
importantvariables_rf(data)
## linear regression
source("linear regression.R", local = TRUE)
linear.regression <- linearRegression(train)
linear.regression
k <- 1
keep_vars <- head(important_vars,k)
keep_vars <- c(keep_vars,"Target")
data_FS <- data[keep_vars]
train <- splitData("train", 0.8, data_FS)
test <- splitData("test", 0.8, data_FS)
## linear regression
source("linear regression.R", local = TRUE)
linear.regression <- linearRegression(train)
linear.regression
