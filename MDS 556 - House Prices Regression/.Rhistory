),
labels = c("No Basement",
"Unfinished",
"Low Quality",
"Average Rec Room",
'Below Average Living Quarters',
"Average Living Quarters",
"Good Living Quarters"
)
)
summary(data_raw$BsmtFinType1)
invalid_basements <- which(is.na(data_raw$BsmtFinType1))
basement_list <- data_raw[invalid_basements,basement_variables]
data_raw$BsmtFinType1[invalid_basements] <- "No Basement"
## Feature 32: BsmtFinSF1: Type 1 finished square feet
data_raw$BsmtFinSF1[is.na(data$BsmtFinSF1)] <-0
which(data_raw$BsmtFinSF1 > 0 & data_raw$BsmtCond == "No Basement")
## Feature 33: BsmtFinType2: Rating of basement finished area
##  if multiple types
data_raw$BsmtFinType2 <- factor(data$BsmtFinType2, order=TRUE,
levels = c("NA",
"Unf",
"LwQ",
"Rec",
'BLQ',
"ALQ",
'GLQ'
),
labels = c("No Basement",
"Unfinished",
"Low Quality",
"Average Rec Room",
'Below Average Living Quarters',
"Average Living Quarters",
"Good Living Quarters"
)
)
invalid_basements <- which(is.na(data_raw$BsmtFinType2))
basement_list <- data_raw[invalid_basements,basement_variables]
data_raw$BsmtFinType2[invalid_basements] <- "No Basement"
## Feature 34: BsmtFinSF2: Type 2 Finished square feet
data_raw$BsmtFinSF2[is.na(data$BsmtFinSF2)] <-0
## Feature 35: BsmtUnfSF: Unfinished Square Feet of Basement Area - Remove
data_raw$BsmtUnfSF[is.na(data$BsmtUnfSF)] <-0
## Feature 36: TotalBsmtSF - Total sq ft of basement
data_raw$TotalBsmtSF[is.na(data$TotalBsmtSF)] <-0
## Feature 45: BsmtFullBath
data_raw$BsmtFullBath[is.na(data$BsmtFullBath)] <-0
summary(data$BsmtFullBath)
## Feature 46: BsmtHalfBath
data_raw$BsmtHalfBath[is.na(data$BsmtHalfBath)] <-0
## FEATURE 37: Heating
data_raw$Heating <- factor(data$Heating,
levels = c("Floor",
"GasA",
"GasW",
"Grav",
'OthW',
"Wall"
),
labels = c("Floor Furnace",
"Gas w/ warm air furnace",
"Gas w/ hot water/steam",
"Gravity Furnace",
"Not Gas",
"Wall Furnace"
)
)
## Feature 38: HeatingQC
data_raw$HeatingQC <- factor(data$HeatingQC, order=TRUE,
levels = c(
"Po",
"Fa",
"TA",
'Gd',
"Ex"
),
labels = c(
"Poor",
"Fair",
"Average",
'Good',
"Excellent"
)
)
## Feature 39: CentralAir
data_raw$CentralAir <- +(data$CentralAir == "Y")
## Feature 40: Electrical - mix of ordinal maybe? Few instances other than SBrkr
## Removing feature.
data_raw$Electrical <- factor(data$Electrical,
levels = c(
"SBrkr",
"FuseA",
"FuseF",
'FuseP',
"Mix"
),
labels = c(
"Standard Circuit",
"Fuse Box - Average",
"Fuse Box - Fair",
'Good',
"Excellent"
)
)
data_raw$Electrical <- NULL
## Feature 41: 1stFlrSF
data_raw$X1stFlrSF[is.na(data$X1stFlrSF)] <-0
## Feature 42: 2ndFlrSF
data_raw$X2ndFlrSF[is.na(data$X2ndFlrSF)] <-0
## Feature 43: LowQualFinSF
data_raw$LowQualFinSF[is.na(data$LowQualFinSF)] <-0
## Feature 44: GrLivArea
data_raw$GrLivArea[is.na(data$GrLivArea)] <-0
## Feature 47: Full Bath - above grade
data_raw$FullBath[is.na(data$FullBath)] <-0
## Feature 48: Half Bath - above grade
data_raw$HalfBath[is.na(data$HalfBath)] <- 0
## Feature 49: Bedroom - above grade
data_raw$BedroomAbvGr[is.na(data$BedroomAbvGr)] <- 0
## Feature 50: Kitchens above grade
data_raw$KitchenAbvGr[is.na(data$KitchenAbvGr)] <- 0
## Feature 51: KitchenQual
data_raw$KitchenQual <- factor(data$KitchenQual, order=TRUE,
levels = c(
"Po",
"Fa",
"TA",
'Gd',
"Ex"
),
labels = c(
"Poor",
"Fair",
"Average",
'Good',
"Excellent"
)
)
## Feature 52: TotRmsAbvGrd
data_raw$TotRmsAbvGrd[is.na(data$TotRmsAbvGrd)] <- 0
## Feature 53: Functional
data_raw$Functional <- factor(data$Functional, order=TRUE,
levels = c(
"Sal",
"Sev",
"Maj2",
"Maj1",
"Mod",
"Min2",
"Min1",
"Typ"
),
labels = c(
"Salvage Only",
"Severely Damanged",
"Major Deductions 2",
"Major Deductions 1",
"Moderate Deductions",
"Minor Deductions 2",
"Minor Deductions 1",
"Typical Functionality"
)
)
## Feature 54: Fireplaces - # of fireplaces
data_raw$Fireplaces[is.na(data$Fireplaces)] <- 0
## Feature 55: FirplaceQu - Fireplace quality
data_raw$FireplaceQu <- factor(data$FireplaceQu, order=TRUE,
levels = c("NA",
"Po",
"Fa",
"TA",
'Gd',
"Ex"
),
labels = c("No Fireplace",
"Poor",
"Fair",
"Average",
'Good',
"Excellent"
)
)
data_raw$FireplaceQu[which(is.na(data_raw$FireplaceQu))] <- "No Fireplace"
## GARAGE FEATURES
## Feature 56: GarageType - Type of Garage
data_raw$GarageType <- factor(data$GarageType, order=TRUE,
levels = c("NA",
"Detchd",
"CarPort",
"BuiltIn",
"Basment",
"Attchd",
"2Types"
),
labels = c("No Garage",
"Detached",
"Car Port",
"Built In",
"Basement Garage",
"Attached",
"2+ Garages"
)
)
data_raw$GarageType[which(is.na(data_raw$GarageType))] <- "No Garage"
## Feature 56: GarageYrBlt - Year garage was built
## replace missing values w year the house was built
data_raw$GarageYrBlt[is.na(data$GarageYrBlt)] <- data$YearBuilt[is.na(data$GarageYrBlt)]
## Feature 57: GarageFinish: Interior finish of garage
data_raw$GarageFinish <- factor(data$GarageFinish, order=TRUE,
levels = c("NA",
"RFn",
"Unf",
"Fin"
),
labels = c("No Garage",
"Rough Finished",
"Unfinished",
"Finished"
)
)
summary(data_raw$GarageFinish)
data_raw$GarageFinish[which(is.na(data_raw$GarageFinish))] <- "No Garage"
## Feature 58: GarageCars: Size of garage in car captacity
data_raw$GarageCars[is.na(data$GarageCars)] <- 0
## Feautre 59: GarageArea
data_raw$GarageArea[is.na(data$GarageArea)] <- 0
## Feature 60: GarageQual
data_raw$GarageQual <- factor(data$GarageQual, order=TRUE,
levels = c("NA",
"Po",
"Fa",
"TA",
'Gd',
"Ex"
),
labels = c("No Garage",
"Poor",
"Fair",
"Average",
'Good',
"Excellent"
)
)
data_raw$GarageQual[which(is.na(data_raw$GarageQual))] <- "No Garage"
## Feature 61: GarageCond
data_raw$GarageCond <- factor(data$GarageCond, order=TRUE,
levels = c("NA",
"Po",
"Fa",
"TA",
'Gd',
"Ex"
),
labels = c("No Garage",
"Poor",
"Fair",
"Average",
'Good',
"Excellent"
)
)
data_raw$GarageCond[which(is.na(data_raw$GarageCond))] <- "No Garage"
summary(data_raw$GarageCond) ## 81 NAs are houses w/o garages
## Feature 62: PavedDrive
data_raw$PavedDrive <- factor(data$PavedDrive, ordered=TRUE,
levels = c(
"N",
"P",
"Y"
),
labels = c(
"Dirt/Gravel",
"Partial Pavement",
"Paved"
)
)
summary(data_raw$PavedDrive)
## Feature 63: WoodDeckSF
data_raw$WoodDeckSF[is.na(data$WoodDeckSF)] <- 0
## Feature 64: OpenPorchSF
data_raw$OpenPorchSF[is.na(data$OpenPorchSF)] <- 0
## Feature 65: EnclosedPorch
data_raw$EnclosedPorch[is.na(data$EnclosedPorch)] <- 0
## Feature 66: 3SsnPorch
data_raw$X3SsnPorch[is.na(data$X3SsnPorch)] <- 0
## Feature 67: ScreenPorch
data_raw$ScreenPorch[is.na(data$ScreenPorch)] <- 0
## POOL: I think just indicating if the house has a pool should be enough
data_raw$HasPool <- +(data$PoolArea > 0)
## Feature 68: PoolArea
data_raw$PoolArea <- NULL
## Feature 69: PoolQC
data_raw$PoolQC <- NULL
## Feature 70: Fence
data_raw$Fence <- factor(data$Fence, ordered=TRUE,
levels = c(
"NA",
"MnWw",
"GdWo",
"MnPrv",
'GdPrv'
),
labels = c(
"No Fence",
"Minimum Fence",
"Good Wood Fence",
'Minimum Privacy',
"Good Privacy"
)
)
data_raw$Fence[which(is.na(data_raw$Fence))] <- "No Fence"
## Feature 71: MiscFeature  - I don't think this is necessary
data_raw$MiscFeature <- NULL
## Feature 72: MiscVal - I don't think this is necessary
data_raw$MiscVal <- NULL
## Feature 75: SaleType
data_raw$SaleType <- factor(data$SaleType,
levels = c(
"WD"
,"CWD"
,"VWD"
,"New"
,'COD'
,"Con"
,"ConLw"
,"ConLI"
,"ConLD"
,"Oth"
),
labels = c(
"Warranty Deed - Conventional"
,"Warranty Deed - Cash"
,"Warranty Deed - VA Loan"
,'Home just constructed and sold'
,"Court Officer Deed/Estate"
,"Contract 15% Down payment regular terms"
,"Contract Low Down payment and low interest"
,"Contract Low Interest"
,"Contract Low Down"
,"Other"
)
)
## Feature 76: SaleCondition
data_raw$SaleCondition <- factor(data$SaleCondition,
levels = c(
"Normal",
"Abnorml",
"AdjLand",
"Alloca",
'Family',
"Partial"
),
labels = c(
"Normal",
"Abnormal",
"AdjLand",
'Allocation',
"Sale btwn Family",
"Home wasnt complete when assessed"
)
)
data_raw <- data
## cleaner - apply validations according to data definitions
data_clean <- data_cleaner(data_raw)
## cleaner - apply validations according to data definitions
data_clean <- data_cleaner(data_raw)
data <- read.csv(file='train.csv', header=TRUE, stringsAsFactors = FALSE)
data_raw <- data
## cleaner - apply validations according to data definitions
data_clean <- data_cleaner(data_raw)
rm(list = ls())
setwd('C:/Users/cusey/source/repos/DataScienceProjects/MDS 556 - House Prices Regression')
## data preprocessing
source("data preprocessing.R", local = TRUE)
setwd('C:/Users/cusey/source/repos/DataScienceProjects/MDS 556 - House Prices Regression')
options(scipen = 999)
data <- read.csv(file='train.csv', header=TRUE, stringsAsFactors = FALSE)
data_raw <- data
## cleaner - apply validations according to data definitions
data_clean <- data_cleaner(data_raw)
data_raw$BsmtExposure[949] <- names(sort(-table(data_raw$BsmtExposure)))[1] ## IMPUTE MODE
rm(list = ls())
setwd('C:/Users/cusey/source/repos/DataScienceProjects/MDS 556 - House Prices Regression')
## data preprocessing
source("data preprocessing.R", local = TRUE)
setwd('C:/Users/cusey/source/repos/DataScienceProjects/MDS 556 - House Prices Regression')
options(scipen = 999)
data <- read.csv(file='train.csv', header=TRUE, stringsAsFactors = FALSE)
data_raw <- data
## cleaner - apply validations according to data definitions
data_clean <- data_cleaner(data_raw)
sapply(data_clean,function(x) sum(is.na(x)))
data <-data_clean
## TARGET VARIABLE
summary(data$SalePrice)
ggplot(data=data[!is.na(data$SalePrice),], aes(x=SalePrice)) +
geom_histogram(binwidth = 10000)
ggplot(data=data[!is.na(data$SalePrice),], aes(x=SalePrice)) +
geom_histogram(binwidth = 10000) +
x_lab("Frequency")
ggplot(data=data[!is.na(data$SalePrice),], aes(x=SalePrice)) +
geom_histogram(binwidth = 10000) +
ylab("Frequency")
ggplot(data=data[!is.na(data$SalePrice),], aes(x=SalePrice)) +
geom_histogram(binwidth = 10000) +
ylab("Frequency") +
title(main="Distribution of Sale Price")
ggplot(data=data[!is.na(data$SalePrice),], aes(x=SalePrice)) +
geom_histogram(binwidth = 10000) +
ylab("Frequency") +
title(main="Distribution of Sale Price")
ggplot(data=data[!is.na(data$SalePrice),], aes(x=SalePrice)) +
geom_histogram(binwidth = 10000) +
ylab("Frequency") +
main("Distribution of Sale Price")
ggplot(data=data[!is.na(data$SalePrice),], aes(x=SalePrice)) +
geom_histogram(binwidth = 10000) +
ylab("Frequency") +
title("Distribution of Sale Price")
ggplot(data=data[!is.na(data$SalePrice),], aes(x=SalePrice)) +
geom_histogram(binwidth = 10000) +
ylab("Frequency") +
ggtitle("Distribution of Sale Price")
data %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales="free") +
geom_histogram()
library(purrr)
library(tidyr)
library(ggplot2)
library(ggplot2)
data %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales="free") +
geom_histogram()
numeric_variables <- which(sapply(data, is.numeric)) #index vector numeric variables
numeric_variables
numeric_variables[Alley]<- NULL
typeof(numeric_variables) #[Alley]<- NULL
numeric_variables[6]<- NULL
numeric_variables <- numeric_variables[,-c(6)]
numeric_variables <- as.matrix(numeric_variables)#[,-c(6)]
View(numeric_variables)
View(numeric_variables)
## NUMERIC VARIABLES
numeric_variables <- which(sapply(data, is.numeric)) #index vector numeric variables
numeric_variables <- as.list(numeric_variables)
numeric_variables
## NUMERIC VARIABLES
numeric_variables <- which(sapply(data, is.numeric)) #index vector numeric variables
numeric_variables <- numeric_variables[-c(3)]
## NUMERIC VARIABLES
numeric_variables <- which(sapply(data, is.numeric)) #index vector numeric variables
numeric_variables
numeric_variables <- numeric_variables[-c(3,  ## Alley
9,  ## CentralAir
33, ## ByRR
34, ## ByHWY
35, ## ByFeeder
36, ## ByPositiveFeature
37, ## Remodeled
38, ## HasMasonVeneer
39  ## HasPool
)]
numeric_variables
data[numeric_variables] %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales="free") +
geom_histogram()
data[numeric_variables] %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales="free") +
geom_histogram() +
ylab("Frequency") +
ggtitle("Distribution")
data[numeric_variables] %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales="free") +
geom_histogram() +
ylab("Frequency") +
xlab("Features")
data[numeric_variables] %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales="free") +
geom_histogram() +
ylab("Frequency") +
xlab("Features") +
ggtitle("Distribution")
names(numeric_variables)
cor_numVar <- cor(names(numeric_variables), use="pairwise.complete.obs") #correlations of all numeric variables
cor_numVar <- cor(data[,numeric_variables], use="pairwise.complete.obs") #correlations of all numeric variables
#select only high corelations
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x)>0.5)))
cor_numVar <- cor_numVar[CorHigh, CorHigh]
cor_sorted <- as.matrix(sort(cor_numVar[,'SalePrice'], decreasing = TRUE))
#select only high corelations
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x)>0.5)))
cor_numVar <- cor_numVar[CorHigh, CorHigh]
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
