,"Townhouse Inside Unit")
)
## FEATURE 17 HouseStyle = Style of dwelling
## Thinking about doing story as numeric
## Finished as boolean
## Split Foyer as boolean
## Split Level as boolen
## If Split Foyer/Level - what is the # of stories?
## Factor for now
data$HouseStyle = factor(data$HouseStyle,
levels = c('1Story',
'1.5Unf',
'2Story',
'2.5Fin',
'2.5Unf',
'SFoyer',
'SLvl'
),
labels = c(   "1 Story"
,"1.5 Story Unfinished"
,"2 Story"
,"2.5 Finished"
,"2.5 Unfinished"
,"Split Foyer"
,"Split Level")
)
##data<- data[,c(2:13,80:85)]
data <- data[c(##"MSSubClass",
"MSZoning"
,"LotFrontage"
,"LotArea"
,"Street"
,"Alley"
,"LotShape"
,"LandContour"
,"Utilities"
,"LotConfig"
,"LandSlope"
,"Neighborhood"
,"ByPositiveFeature"
,"ByFeeder"
,"ByHWY"
,"ByRR"
,"BldgType"
,"HouseStype"
,"SalePrice")]
data$Remodeled <- +(data$YearRemodAdd != data$YearBuilt)
## comment this code after I'm satisfied with
## feature engineering portion
setwd('C:/Users/cusey/source/repos/DataScienceProjects/MDS 556 - House Prices Regression')
source("data preprocessing.R", local = TRUE)
data <- dataPreprocessing()
setwd('C:/Users/cusey/source/repos/DataScienceProjects/MDS 556 - House Prices Regression')
options(scipen = 999)
data <- read.csv(file='train.csv', header=TRUE)
data$MSZoning = factor(data$MSZoning,
levels = c(  'A'
,'C (all)'
,'FV'
,'I'
,'RH'
,'RL'
,'RP'
,'RM'
),
labels = c( 'Agriculutre'
,'Commercial'
,'Floating Village Residential'
,'Industrial'
,'Residential High Density'
,'Residential Low Density'
,'Residential Low Density Park'
,'Residential Medium Density'))
## 4 - FEATURE: LotFrontage, for now replace missing values w/ mean
data$LotFrontage = ifelse(is.na(data$LotFrontage),
ave(data$LotFrontage, FUN = function(x) mean(x,na.rm=TRUE)),
data$LotFrontage)
## 5 - FEATURE: LotArea, for now replace missing values w/ mean if any
data$LotArea = ifelse(is.na(data$LotArea),
ave(data$LotArea, FUN = function(x) mean(x,na.rm=TRUE)),
data$LotArea)
## 6 - FEATURE: STREET, turn to factor
data$Street = factor(data$Street,
levels = c(  'Grvl'
,'Pave'
),
labels = c("Gravel","Paved"))
data$Alley = +(!is.na(data$Alley))
## 8 - FEATURE: LotShape, turn to factor
data$LotShape = factor(data$LotShape,
levels = c(    'Reg'
,'IR1'
,'IR2'
,'IR3'
),
labels = c( "Regular"
,"Slightly Irregular"
,"Moderately Irregular"
,"Irregular"))
## 9 - FEATURE: LandContour, turn to factor
data$LandContour = factor(data$LandContour,
levels = c(    'Lvl'
,'Bnk'
,'HLS'
,'Low'
),
labels = c( "Near Flat/Level"
,"Banked"
,"Hillside"
,"Low"))
## 10 - FEATURE: Utilities, turn to factor
data$Utilities = factor(data$Utilities,
levels = c('AllPub',
'NoSewr',
'NoSeWa',
'ELO'
),
labels = c( "All Public Utilities"
,"Electricity, Gas, and Water"
,"Electricity and Gas Only"
,"Electricity Only"))
## 11 - FEATURE: LotConfig, turn to factor
data$LotConfig = factor(data$LotConfig,
levels = c('Inside',
'Corner',
'CulDSac',
'FR2',
'FR3'
),
labels = c( "Inside Lot"
,"Corner Log"
,"Cul-de-sac"
,"Frontage on 2 sides of property"
,"Frontage on 3 sides of property"))
## 12 - FEATURE: LandSlope, turn to factor
data$LandSlope = factor(data$LandSlope,
levels = c('Gtl',
'Mod',
'Sev'
),
labels = c( "Gentle Slope"
,"Moderate Slope"
,"Sever Slope")
)
## 13 - FEATURE: Neighborhood, turn to factor
data$Neighborhood = factor(data$Neighborhood,
levels = c('Blmngtn',
'Blueste',
'BrDale',
'BrkSide',
'ClearCr',
'CollgCr',
'Crawfor',
'Edwards',
'Gilbert',
'IDOTRR',
'MeadowV',
'Mitchel',
'Names',
'NoRidge',
'NPkVill',
'NridgHt',
'NWAmes',
'OldTown',
'SWISU',
'Sawyer',
'SawyerW',
'Somerst',
'StoneBr',
'Timber',
'Veenker',
'Other'
),
labels = c( "Bloomington Heights"
,"Bluestem"
,"Briardale"
,"Brookside"
,"Clear Creek"
,"College Creek"
,"Crawford"
,"Edwards"
,"Gilbert"
,"Iowa DOT and Rail Road"
,"Meadow Village"
,"Mitchell"
,"North Ames"
,"Northridge"
,"Northpark Villa"
,"Northridge Heights"
,"Northwest Ames"
,"Old Town"
,"South & West of Iowa State University"
,"Sawyer"
,"Sawyer West"
,"Somerset"
,"Stone Brook"
,"Timberland"
,"Veenker"
,"Other")
)
data$Neighborhood[is.na(data$Neighborhood)] <- "Other"
#14 & #15 Condition1 and Condition2
## Artial Street = Highway
## Feeder Street = Important Road that feeds into high traffic area
## Combine Condition1 and Condition2
## binary = ByHWY
##          ByFeeder
##          ByRR
##          ByPositiveFeature
## Normal I Think would be a duplicate dummy variable.
RR_List = c("RRNn","RRAn","RRNe", "RRAe")
data$ByRR <- +(data$Condition1 %in% RR_List | data$Condition2 %in% RR_List)
rm("RR_List")
data$ByHWY = +(data$Condition1 == "Artery" | data$Condition2 == "Artery")
data$ByFeeder = +(data$Condition1 == "Feedr" | data$Condition2 == "Feedr")
data$ByPositiveFeature = +(data$Condition1 == "PosN" | data$Condition2 == "PosN")
## FEATURE 16 BldgType = Type of Dwelling
## Maybe combine townhouse factor
data$BldgType = factor(data$BldgType,
levels = c('1Fam',
'2FmCon',
'Duplx',
'Twnhse',
'TwnhsI'
),
labels = c(  "Single-Family Detached"
,"Two-Family Conversion"
,"Duplex"
,"Townhouse End Unit"
,"Townhouse Inside Unit")
)
## FEATURE 17 HouseStyle = Style of dwelling
## Thinking about doing story as numeric
## Finished as boolean
## Split Foyer as boolean
## Split Level as boolen
## If Split Foyer/Level - what is the # of stories?
## Factor for now
## What to do with unknown values?
data$HouseStyle = factor(data$HouseStyle,
levels = c('1Story',
'1.5Unf',
'2Story',
'2.5Fin',
'2.5Unf',
'SFoyer',
'SLvl'
),
labels = c(   "1 Story"
,"1.5 Story Unfinished"
,"2 Story"
,"2.5 Finished"
,"2.5 Unfinished"
,"Split Foyer"
,"Split Level")
)
data$Remodeled <- +(data$YearRemodAdd != data$YearBuilt)
##data<- data[,c(2:13,80:85)]
data <- data[c(##"MSSubClass",
"MSZoning"
,"LotFrontage"
,"LotArea"
,"Street"
,"Alley"
,"LotShape"
,"LandContour"
,"Utilities"
,"LotConfig"
,"LandSlope"
,"Neighborhood"
,"ByPositiveFeature"
,"ByFeeder"
,"ByHWY"
,"ByRR"
,"BldgType"
,"HouseStype"
,"SalePrice"
,"OverallQual"
,"OverallCond"
,"YearBuilt"
,"YearRemodAdd")]
##data<- data[,c(2:13,80:85)]
data <- data[c(##"MSSubClass",
"MSZoning"
,"LotFrontage"
,"LotArea"
,"Street"
,"Alley"
,"LotShape"
,"LandContour"
,"Utilities"
,"LotConfig"
,"LandSlope"
,"Neighborhood"
,"ByPositiveFeature"
,"ByFeeder"
,"ByHWY"
,"ByRR"
,"BldgType"
,"HouseStype"
,"SalePrice"
,"OverallQual"
,"OverallCond"
,"YearBuilt"
,"Remodeled")]
##data<- data[,c(2:13,80:85)]
data <- data[c(##"MSSubClass",
"MSZoning"
,"LotFrontage"
,"LotArea"
,"Street"
,"Alley"
,"LotShape"
,"LandContour"
,"Utilities"
,"LotConfig"
,"LandSlope"
,"Neighborhood"
,"ByPositiveFeature"
,"ByFeeder"
,"ByHWY"
,"ByRR"
,"BldgType"
,"HouseStyle"
,"SalePrice"
,"OverallQual"
,"OverallCond"
,"YearBuilt"
,"Remodeled")]
## comment this code after I'm satisfied with
## feature engineering portion
setwd('C:/Users/cusey/source/repos/DataScienceProjects/MDS 556 - House Prices Regression')
source("data preprocessing.R", local = TRUE)
data <- dataPreprocessing()
sapply(data,function(x) sum(is.na(x)))
## comment this code after I'm satisfied with
## feature engineering portion
setwd('C:/Users/cusey/source/repos/DataScienceProjects/MDS 556 - House Prices Regression')
source("data preprocessing.R", local = TRUE)
data <- dataPreprocessing()
sapply(data,function(x) sum(is.na(x)))
## Correlation Coefficients #####################
##library(help = "stats")
plot(data$LotArea, data$SalePrice, col="red", xlab="Year Built", ylab="Sales Price", main="Sales Price and Lot Area")
## load in user defined functions.
backwardElimination <- function(x, sl
) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
## Feature Engineering
backwardElimination(data,.05)
## Feature Engineering
backwardElimination(data,.05)
## load in user defined functions.
backwardElimination <- function(x, sl
) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = SalePrice ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
## Feature Engineering
backwardElimination(data,.05)
numVars = length(data)
for (i in c(1:numVars)){
regressor = lm(formula = SalePrice ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
x<-data
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = SalePrice ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
sl<-05
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = SalePrice ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
## load in user defined functions.
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = SalePrice ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
## Feature Engineering
backwardElimination(data,.05)
x <- dataPreprocessing()
sl <- .05
## Backwards Elimination
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = SalePrice ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
sl <- .05
regressor = lm(formula = SalePrice ~ ., data = x)
x <- dataPreprocessing()
regressor = lm(formula = SalePrice ~ ., data = x)
for (i in c(1:numVars)){
regressor = lm(formula = SalePrice ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
setwd('C:/Users/cusey/source/repos/DataScienceProjects/MDS 556 - House Prices Regression')
source("data preprocessing.R", local = TRUE)
x <- dataPreprocessing()
sl <- .05
## Backwards Elimination
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = SalePrice ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
for (i in c(1:numVars)){
regressor = lm(formula = SalePrice ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
for (i in c(1:numVars)){
regressor = lm(formula = SalePrice ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
x <- dataPreprocessing()
for (i in c(1:numVars)){
regressor = lm(formula = SalePrice ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
summary(regressor)
for (i in c(1:numVars)){
regressor = lm(formula = SalePrice ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
